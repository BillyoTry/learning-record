                            | #函数开始
0x000:                      |     .pos   0
0x000:                      | init:
0x000: 30f40001000000000000 |     irmovq stack,%rsp #设置栈指针
0x00a: 804800000000000000   |     call main
0x013: 00                   |     halt
                            | #链表
0x018:                      |     .align 8
0x018:                      | ele1:
0x018: 0a00000000000000     |     .quad 0x00a
0x020: 2800000000000000     |     .quad ele2
0x028:                      | ele2:
0x028: b000000000000000     |     .quad 0x0b0
0x030: 3800000000000000     |     .quad ele3
0x038:                      | ele3:
0x038: 000c000000000000     |     .quad 0xc00
0x040: 0000000000000000     |     .quad 0
                            | 
0x048:                      | main:
0x048: 30f71800000000000000 |     irmovq ele1,%rdi
0x052: 805c00000000000000   |     call rsum_list
0x05b: 90                   |     ret
                            | 
0x05c:                      | rsum_list:
0x05c: a03f                 |     pushq %rbx             #保存使用前的数据
0x05e: 6300                 |     xorq %rax,%rax         #val = 0;
0x060: 6277                 |     andq %rdi,%rdi         #判断ls是否为零
0x062: 738a00000000000000   |     je end                 #ls非零
0x06b: 50370000000000000000 |     mrmovq (%rdi),%rbx     #val = ls->val
0x075: 50770800000000000000 |     mrmovq 8(%rdi),%rdi    #rest = rsum_list(ls->next);
0x07f: 805c00000000000000   |     call rsum_list
0x088: 6030                 |     addq %rbx,%rax         #val + rest
0x08a:                      | end:
0x08a: b03f                 |     popq %rbx              #恢复保存前的数据
0x08c: 90                   |     ret
                            | 
                            | #设置栈地址
0x100:                      |     .pos 0x100
0x100:                      | stack:
                            | 
